# -*- coding: utf-8 -*-
"""CreditCardFraud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RB76LtKdWNvCpp1cwARRYrY3l0pX1-ot

# TSF GRIP Data Science and Business Analytics Internship
## Task 1
### M. Qasim Khan

# To do:
1. We will be making a linear regression model to predict a student's percentage achieved based on the number of hours studied by them. 

2. We will be loading data from a csv file and then carry out our operations on that data.

# Setup
"""

# First we will be importing the required libraries to perforn our task
from matplotlib import pyplot as plt # importing for data visualization
from matplotlib import gridspec
import numpy as np # for data processing
import pandas as pd # for data processing
import seaborn as sns # for creating a data directory

"""## Part 01 - Download Student Scores Dataset

We are using urllib to retrieve data from the given link and then create a folder which will store the csv file.
"""

# Link from where we will download the data
cards_data = pd.read_csv('creditcard.csv')

"""## Exploratory Data Analysis

After downloading the csv file, let's observe the data and try to understand what it means.
"""

# Loading the dataset 
cards_data.head()

# Now we will plot the distrinution of our scores to see what their relation is like
print(cards_data.shape)
print(cards_data.describe())

"""Here we can see that the trend between **`Hours Studied`** and **`Percentage Score`** is a positive trend, meaning the percentage increases as the hours studied increases. """

# Extract only the relevant columns. X: Input, Y: Output
# iloc specifies the position of the column we want to select. :, part means all rows. ,-1 means last column
fraud=cards_data[cards_data['Class']==1]
valid=cards_data[cards_data['Class']==0]
outlierFraction = len(fraud)/float(len(valid))
print(outlierFraction)
print('Fraud Cases: {}'.format(len(cards_data[cards_data['Çlass']==1])))
print('Valid Transactions: {}'.format(len(cards_data[cards_data['Çlass']==0])))

print("Amount details of the fradulent transactions")
fraud.Amount.describe()
print("Amount details of the valid transactions")
valid.Amount.describe()

corr_matrix=cards_data.corr()
Figure=plt.figure(figsize=(12,9))
sns.heatmap(corr_matrix,vmax=.8,square=True)
plt.show()

"""## Part 02 - Train Test Split

To determine whether regression is effective, we can split our data into a training and test set and compare performance.
"""

X = cards_data.drop(['Class'],axis=1)
Y = cards_data['Class']
print(X.shape)
print(Y.shape)
x_Data=X.values
y_Data=Y.values

from sklearn.model_selection import train_test_split
xTrain,xTest,yTrain,yTest=train_test_split(x_Data,y_Data,test_size=0.2,random_state=42)

"""## Part 03 - Training the model

Here we will be training the model on the train sets we got from train test split
"""

from sklearn.ensemble import RandomForestClassifier  
forest = RandomForestClassifier()  
forest.fit(xTrain, yTrain) 
print("Training complete.")
y_pred=forest.predict(xTest)

"""Here now we will plot the regression line"""

accuracy_score,
# Plotting the regression line
from sklearn .metrics import classification_report, accuracy_score
from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import f1_score, matthews_corrcoef
from sklearn.metrics import confusion_matrix

no_of_outliers=len(fraud)
no_of_errors=(y_pred!=yTest).sum()
print("The model is Random Forest Classifier")

Accuracy=accuracy_score(yTest,y_pred)
print("The accuracy is {}".format(Accuracy))

precision=precision_score(yTest,y_pred)
print("The precision is {}".format(precision))

Recall = recall_score(yTest, y_pred)
print("The recall is {}".format(Recall))
  
f1 = f1_score(yTest, y_pred)
print("The F1-Score is {}".format(f1))
  
MCC = matthews_corrcoef(yTest, y_pred)
print("The Matthews correlation coefficient is{}".format(MCC))

"""## Part 05 - Making Predictions"""

LABELS = ['Normal', 'Fraud']
conf_matrix = confusion_matrix(yTest, yPred)
plt.figure(figsize =(12, 12))
sns.heatmap(conf_matrix, xticklabels = LABELS, 
            yticklabels = LABELS, annot = True, fmt ="d");
plt.title("Confusion matrix")
plt.ylabel('True class')
plt.xlabel('Predicted class')
plt.show()

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

# You can also test with your own data
hours = np.arange(1).reshape(1,-1)
hours[0][0]=9.25
print(hours)
own_pred = regressor.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""## Model Evaluation

#### Here we will compare the model used to see its effectivness
"""

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))